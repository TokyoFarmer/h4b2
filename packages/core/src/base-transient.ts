import { ConstructorOrFactory, App } from './internal';

/**
 * Derive from this class to create H4BFF transients.
 *
 * Transients are classes that are instantiated every time its requested, unlike
 * services / singletons which are instantiated, respectively, once per service context / app
 *
 * @remarks
 *
 * The main use case of transients is to provide access to App to the class
 * as well as singletons, and to allow for easier testing via overriding.
 *
 * An example `BaseTransient` would be a ComponentState, the state generated by a component that
 * will be passed down manually to child components (or via react context), but needs to be
 * instantiated more than once.
 *
 * @public
 */
export class BaseTransient {
  /**
   * @internal
   */
  protected static __baseTransient = true;

  constructor(protected app: App) {}

  /**
   * Proxy for `app.createTransient(Klass)`.
   */
  createTransient<T extends BaseTransient>(SvcClass: ConstructorOrFactory<App, T>): T {
    return this.app.createTransient(SvcClass);
  }

  /**
   * Proxy for `app.getSingleton(Klass)`.
   */
  getSingleton<T>(SingletonClass: ConstructorOrFactory<App, T>): T {
    return this.app.getSingleton(SingletonClass);
  }
}
